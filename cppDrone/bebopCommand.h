#pragma once
#include <WinSock2.h>
#include <WS2tcpip.h>
#include <string>
#include <iostream>
#include <thread>
#include <mutex>
#include <cstring>
#include <math.h>
#include <fstream>
#include <opencv2\highgui\highgui.hpp>
#include <opencv2\core\core.hpp>
#include <opencv2\opencv.hpp>
#include <queue>
#include "picojson.h"
#include "TCPClient.h"
#include "TCPServer.h"
#include "UDPSocket.h"
#include "VideoDataPool.h"

extern "C" { 
    #include <libavcodec/avcodec.h> 
    #include <libavformat/avformat.h> 
    #include <libswscale/swscale.h> 
}

#ifdef _WIN32
#ifndef CV_VK_UP
#define CV_VK_UP (VK_UP<<16)
#endif
#ifndef CV_VK_DOWN
#define CV_VK_DOWN (VK_DOWN<<16)
#endif
#ifndef CV_VK_LEFT
#define CV_VK_LEFT (VK_LEFT<<16)
#endif
#ifndef CV_VK_RIGHT
#define CV_VK_RIGHT (VK_RIGHT<<16)
#endif
#else
#if defined(__APPLE__)
#ifndef CV_VK_UP
#define CV_VK_UP (0xf700)
#endif
#ifndef CV_VK_DOWN
#define CV_VK_DOWN (0xf701)
#endif
#ifndef CV_VK_LEFT
#define CV_VK_LEFT (0xf702)
#endif
#ifndef CV_VK_RIGHT
#define CV_VK_RIGHT (0xf703)
#endif
#else
#ifndef CV_VK_UP
#define CV_VK_UP (0xff52)
#endif
#ifndef CV_VK_DOWN
#define CV_VK_DOWN (0xff54)
#endif
#ifndef CV_VK_LEFT
#define CV_VK_LEFT (0xff51)
#endif
#ifndef CV_VK_RIGHT
#define CV_VK_RIGHT (0xff53)
#endif
#endif
#endif


// eARCOMMANDS_ID_PROJECT
#define ARCOMMANDS_ID_PROJECT_COMMON 0
#define ARCOMMANDS_ID_PROJECT_ARDRONE3 1

// eARCOMMANDS_ID_ARDRONE3_CLASS
#define ARCOMMANDS_ID_ARDRONE3_CLASS_PILOTING 0
#define ARCOMMANDS_ID_ARDRONE3_CLASS_ANIMATIONS 5
#define ARCOMMANDS_ID_ARDRONE3_CLASS_CAMERA 1
#define ARCOMMANDS_ID_ARDRONE3_CLASS_MEDIARECORD 7
#define ARCOMMANDS_ID_ARDRONE3_CLASS_MEDIARECORDSTATE 8
#define ARCOMMANDS_ID_ARDRONE3_CLASS_MEDIARECORDEVENT 3
#define ARCOMMANDS_ID_ARDRONE3_CLASS_PILOTINGSTATE 4
#define ARCOMMANDS_ID_ARDRONE3_CLASS_NETWORK 13
#define ARCOMMANDS_ID_ARDRONE3_CLASS_NETWORKSTATE 14
#define ARCOMMANDS_ID_ARDRONE3_CLASS_PILOTINGSETTINGS 2
#define ARCOMMANDS_ID_ARDRONE3_CLASS_PILOTINGSETTINGSSTATE 6
#define ARCOMMANDS_ID_ARDRONE3_CLASS_SPEEDSETTINGS 11
#define ARCOMMANDS_ID_ARDRONE3_CLASS_SPEEDSETTINGSSTATE 12
#define ARCOMMANDS_ID_ARDRONE3_CLASS_NETWORKSETTINGS 9
#define ARCOMMANDS_ID_ARDRONE3_CLASS_NETWORKSETTINGSSTATE 10
#define ARCOMMANDS_ID_ARDRONE3_CLASS_SETTINGS 15
#define ARCOMMANDS_ID_ARDRONE3_CLASS_SETTINGSSTATE 16
#define ARCOMMANDS_ID_ARDRONE3_CLASS_DIRECTORMODE 17
#define ARCOMMANDS_ID_ARDRONE3_CLASS_DIRECTORMODESTATE 18
#define ARCOMMANDS_ID_ARDRONE3_CLASS_PICTURESETTINGS 19
#define ARCOMMANDS_ID_ARDRONE3_CLASS_PICTURESETTINGSSTATE 20
#define ARCOMMANDS_ID_ARDRONE3_CLASS_MEDIASTREAMING 21
#define ARCOMMANDS_ID_ARDRONE3_CLASS_MEDIASTREAMINGSTATE 22
#define ARCOMMANDS_ID_ARDRONE3_CLASS_GPSSETTINGS 23
#define ARCOMMANDS_ID_ARDRONE3_CLASS_GPSSETTINGSSTATE 24
#define ARCOMMANDS_ID_ARDRONE3_CLASS_CAMERASTATE 25
#define ARCOMMANDS_ID_ARDRONE3_CLASS_ANTIFLICKERING 29
#define ARCOMMANDS_ID_ARDRONE3_CLASS_ANTIFLICKERINGSTATE 30

// eARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD
#define ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_FLATTRIMCHANGED 0
#define ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_FLYINGSTATECHANGED 1
#define ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_ALERTSTATECHANGED 2
#define ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_NAVIGATEHOMESTATECHANGED 3
#define ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_POSITIONCHANGED 4
#define ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_SPEEDCHANGED 5
#define ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_ATTITUDECHANGED 6
#define ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_AUTOTAKEOFFMODECHANGED 7
#define ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_ALTITUDECHANGED 8
#define ARCOMMANDS_ID_ARDRONE3_PILOTINGSTATE_CMD_MAX 9

// eARCOMMANDS_ID_ARDRONE3_ANIMATIONS_CMD;
#define ARCOMMANDS_ID_ARDRONE3_ANIMATIONS_CMD_FLIP 0
#define ARCOMMANDS_ID_ARDRONE3_ANIMATIONS_CMD_MAX 1

// eARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE;
#define ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_LANDED 0
#define ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_TAKINGOFF 1
#define ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_HOVERING 2
#define ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_FLYING 3
#define ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_LANDING 4
#define ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_EMERGENCY 5
#define ARCOMMANDS_ARDRONE3_PILOTINGSTATE_FLYINGSTATECHANGED_STATE_MAX 6

// eARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION;
#define ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_FRONT 0
#define ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_BACK 1
#define ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_RIGHT 2
#define ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_LEFT 3
#define ARCOMMANDS_ARDRONE3_ANIMATIONS_FLIP_DIRECTION_MAX 4

// eARCOMMANDS_ID_COMMON_CLASS
#define ARCOMMANDS_ID_COMMON_CLASS_NETWORK 0
#define ARCOMMANDS_ID_COMMON_CLASS_NETWORKEVENT 1
#define ARCOMMANDS_ID_COMMON_CLASS_SETTINGS 2
#define ARCOMMANDS_ID_COMMON_CLASS_SETTINGSSTATE 3
#define ARCOMMANDS_ID_COMMON_CLASS_COMMON 4
#define ARCOMMANDS_ID_COMMON_CLASS_COMMONSTATE 5
#define ARCOMMANDS_ID_COMMON_CLASS_OVERHEAT 6
#define ARCOMMANDS_ID_COMMON_CLASS_OVERHEATSTATE 7
#define ARCOMMANDS_ID_COMMON_CLASS_CONTROLLERSTATE 8
#define ARCOMMANDS_ID_COMMON_CLASS_WIFISETTINGS 9
#define ARCOMMANDS_ID_COMMON_CLASS_WIFISETTINGSSTATE 10
#define ARCOMMANDS_ID_COMMON_CLASS_MAVLINK 11
#define ARCOMMANDS_ID_COMMON_CLASS_MAVLINKSTATE 12
#define ARCOMMANDS_ID_COMMON_CLASS_CALIBRATION 13
#define ARCOMMANDS_ID_COMMON_CLASS_CALIBRATIONSTATE 14
#define ARCOMMANDS_ID_COMMON_CLASS_CAMERASETTINGSSTATE 15
#define ARCOMMANDS_ID_COMMON_CLASS_GPS 16
#define ARCOMMANDS_ID_COMMON_CLASS_FLIGHTPLANSTATE 17
#define ARCOMMANDS_ID_COMMON_CLASS_FLIGHTPLANEVENT 19
#define ARCOMMANDS_ID_COMMON_CLASS_ARLIBSVERSIONSSTATE 18

// eARCOMMANDS_ID_ARDRONE3_PILOTING_CMD
#define ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_FLATTRIM 0
#define ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_TAKEOFF 1
#define ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_PCMD 2
#define ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_LANDING 3
#define ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_EMERGENCY 4
#define ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_NAVIGATEHOME 5
#define ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_AUTOTAKEOFFMODE 6
#define ARCOMMANDS_ID_ARDRONE3_PILOTING_CMD_MAX 7

// eARCOMMANDS_ID_ARDRONE3_CLASS_SETTINGSSTATE_CMD
#define ARCOMMANDS_ID_ARDRONE3_CLASS_SETTINGSSTATE_CMD_PRODUCTMOTORVERSIONLISTCHANGED 0
#define ARCOMMANDS_ID_ARDRONE3_CLASS_SETTINGSSTATE_CMD_PRODUCTGPSVERSIONCHANGED 1
#define ARCOMMANDS_ID_ARDRONE3_CLASS_SETTINGSSTATE_CMD_MOTORERRORSTATECHANGED 2
#define ARCOMMANDS_ID_ARDRONE3_CLASS_SETTINGSSTATE_CMD_MOTORSOFTWAREVERSIONCHANGED 3
#define ARCOMMANDS_ID_ARDRONE3_CLASS_SETTINGSSTATE_CMD_MOTORFLIGHTSSTATUSCHANGED 4
#define ARCOMMANDS_ID_ARDRONE3_CLASS_SETTINGSSTATE_CMD_MOTORERRORLASTERRORCHANGED 5
#define ARCOMMANDS_ID_ARDRONE3_CLASS_SETTINGSSTATE_CMD_P7ID 6
#define ARCOMMANDS_ID_ARDRONE3_CLASS_SETTINGSSTATE_CMD_MAX 7

// eARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR
#define ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_NOERROR 0
#define ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERROREEPROM 1
#define ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORMOTORSTALLED 2
#define ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORPROPELLERSECURITY 3
#define ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORCOMMLOST 4
#define ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORRCEMERGECYSTOP 5
#define ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORREALTIME 6
#define ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORMOTORSETTING 7
#define ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORTEMPERATURE 8
#define ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORBATTERYVOLTAGE 9
#define ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORLIPOCELLS 10
#define ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORMOSFET 11
#define ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORBOOTLOADER 12
#define ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_ERRORASSERT 13
#define ARCOMMANDS_ID_ARDRONE3_SETTINGSSTATE_MOTORERRORSTATECHANGED_MOTORERROR_MAX 14


// eARCOMMANDS_ID_COMMON_COMMON_CMD
#define ARCOMMANDS_ID_COMMON_COMMON_CMD_ALLSTATES 0
#define ARCOMMANDS_ID_COMMON_COMMON_CMD_CURRENTDATE 1
#define ARCOMMANDS_ID_COMMON_COMMON_CMD_CURRENTTIME 2
#define ARCOMMANDS_ID_COMMON_COMMON_CMD_REBOOT 3
#define ARCOMMANDS_ID_COMMON_COMMON_CMD_MAX 4

// eARCOMMANDS_ID_COMMON_COMMONSTATE_CMD;
#define ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_ALLSTATESCHANGED 0
#define ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_BATTERYSTATECHANGED 1
#define ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_MASSSTORAGESTATELISTCHANGED 2
#define ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_MASSSTORAGEINFOSTATELISTCHANGED 3
#define ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_CURRENTDATECHANGED 4
#define ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_CURRENTTIMECHANGED 5
#define ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_MASSSTORAGEINFOREMAININGLISTCHANGED 6
#define ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_WIFISIGNALCHANGED 6
#define ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_SENSORSSTATESLISTCHANGED 7
#define ARCOMMANDS_ID_COMMON_COMMONSTATE_CMD_MAX 8

// eARMEDIA_ENCAPSULER_CODEC
#define CODEC_UNKNNOWN 0
#define CODEC_VLIB 1
#define CODEC_P264 2
#define CODEC_MPEG4_VISUAL 3
#define CODEC_MPEG4_AVC 4
#define CODEC_MOTION_JPEG 5

// eARMEDIA_ENCAPSULER_FRAME_TYPE;
#define ARMEDIA_ENCAPSULER_FRAME_TYPE_UNKNNOWN 0
#define ARMEDIA_ENCAPSULER_FRAME_TYPE_I_FRAME 1
#define ARMEDIA_ENCAPSULER_FRAME_TYPE_P_FRAME 2
#define ARMEDIA_ENCAPSULER_FRAME_TYPE_JPEG 3
#define ARMEDIA_ENCAPSULER_FRAME_TYPE_MAX 4

// libARNetworkAL/Includes/libARNetworkAL/ARNETWORKAL_Manager.h
#define ARNETWORKAL_MANAGER_DEFAULT_ID_MAX 256

// eARNETWORK_MANAGER_INTERNAL_BUFFER_ID
#define ARNETWORK_MANAGER_INTERNAL_BUFFER_ID_PING 0
#define ARNETWORK_MANAGER_INTERNAL_BUFFER_ID_PONG 1
#define ARNETWORK_MANAGER_INTERNAL_BUFFER_ID_MAX 3

// eARNETWORKAL_FRAME_TYPE
#define ARNETWORKAL_FRAME_TYPE_UNINITIALIZED 0
#define ARNETWORKAL_FRAME_TYPE_ACK 1
#define ARNETWORKAL_FRAME_TYPE_DATA 2
#define ARNETWORKAL_FRAME_TYPE_DATA_LOW_LATENCY 3
#define ARNETWORKAL_FRAME_TYPE_DATA_WITH_ACK 4
#define ARNETWORKAL_FRAME_TYPE_MAX 5

// ARNETWORKAL_Frame_t identifiers
#define BD_NET_CD_NONACK_ID 10
#define BD_NET_CD_ACK_ID 11
#define BD_NET_CD_EMERGENCY_ID 12
#define BD_NET_CD_VIDEO_ACK_ID 13
#define BD_NET_DC_VIDEO_DATA_ID 125
#define BD_NET_DC_EVENT_ID 126
#define BD_NET_DC_NAVDATA_ID 127

#define BD_NET_DC_VIDEO_FRAG_SIZE 1000
#define BD_NET_DC_VIDEO_MAX_NUMBER_OF_FRAG 128

#define ARCOMMANDS_ID_ARDRONE3_CAMERA_CMD_ORIENTATION 0

#define BD_RAW_FRAME_BUFFER_SIZE 50
#define BD_RAW_FRAME_POOL_SIZE 50

#define DISCOVERY_PORT 44444
#define D2C_PORT 43210
#define C2D_PORT 54321
#define VIDEO_PORT 5555
#define IP "192.168.42.1"

class bebopCommand
{
	typedef struct{
		UINT8 type;
		UINT8 id;
		UINT8 seq;
		UINT32 size;
		int dataSize;
		UINT8 *data;

	}NetworkFrame;

	typedef struct{
		UINT16 frameNumber;
		UINT8 frameFlags;
		UINT8 fragmentNumber;
		UINT8 fragmentPerFrame;
		UINT8 *frame;
		int frameSize;
	}StreamFrame;

	typedef struct Fragment{
		Fragment(){
			size = 0;
			data = new UINT8[1];
		}
		UINT8 *data;
		int size;
	}Fragment;

	typedef struct{
		UINT16 frameNumber;
		UINT8 *packetsACK;
	}AckPacket;

	typedef struct ArStreamFrame{
		ArStreamFrame(){
			frameSize = 0;
			frame = new UINT8[0];
			frameACK = new UINT8[16];
			fragments = new Fragment[1];
			fragments[0].data = new UINT8[1];
			waitFlag = false;
			fragmentPerFrame = 1;
			fragmentCounter = 0;
		}
		UINT16 frameNumber;
		UINT8 *frameACK;
		UINT8 *frame;
		UINT8 frameFlags;
		Fragment *fragments;
		AckPacket ackPacket;
		int frameSize;
		int fragmentPerFrame;
		int fragmentCounter;
		bool waitFlag;
	}ArStreamFrame;

	typedef struct{
		UINT8 *cmd;
		int typeSize;
		int size;
	}Command;

	

	typedef struct {
		int flag;
		int roll;
		int pitch;
		int yaw;
		int gaz;
		float psi;
	}PCMD;

	typedef struct {
		UINT8 projectId;
		UINT8 classId;
		UINT8 eventId;
		UINT8 *data;
	} EventFrame;

	typedef struct NavData{
		NavData(){
			battery = 0;
			vx = 0.0f;
			vy = 0.0f;
			vz = 0.0f;
			altitude = 0.0f;
			psi = 0.0f;
			phi = 0.0f;
			theta = 0.0f;
			flyingState = 0;
		}
		int battery;
		float vx;
		float vy;
		float vz;
		double altitude;
		double phi;
		double theta;
		double psi;
		UINT8 flyingState;

	} NavData;

	typedef struct {
		AVCodec *codec;
		AVCodecContext *codecCtx;
		AVFrame *decodedFrame;
		AVFrame *decodedFrameBGR;
		AVPacket avPacket;
		SwsContext *convertCtx;
		UINT8 *outputData;
		UINT8 *buffer;
		int outputDataSize;
	} FFMPEGDecoder;

private:	
	
	void generateAllStates();
	void createAck(NetworkFrame *networkFrame, Command *command);
	void recivingThread();
	void startReceive();
	void setSendPCMDTask();
	void beforeSendCommandFilter(Command *cmd, int type = ARNETWORKAL_FRAME_TYPE_DATA, int id = BD_NET_CD_NONACK_ID);
	void parseRawFrame(char* buf, NetworkFrame *networkFrame);
	void parseNetworkFrame(NetworkFrame *networkFrame, StreamFrame *streamFrame);
	void createARStreamACK(StreamFrame *streamFrame, Command *command);
	int handshake();
	void sendCommand(Command *packet, std::string ip = "192.168.42.1");
	void createPong(NetworkFrame *networkFrame, Command *pong);
	
	void PCMDThread();
	void generatePCMD(Command *command);
	void initPCMD();
	void appendNewFrame(StreamFrame *streamFrame);
	void decodingThread();
	void initVideo();
	void parseEvent(NetworkFrame *networkFrame);
	void parseNavdata(NetworkFrame *networkFrame);
	

	//変数
	int *seq;
	ArStreamFrame arStreamFrame;
	std::ofstream ofs;
	PCMD _pcmd;
	IplImage *img;
	WSADATA wsaData;
	UDPSocket c2dSocket;
	UDPSocket d2cSocket;
	TCPServer vodeoStream;
	
	bool newImageFlag;

	std::vector<std::thread> threadGroup;

	std::mutex imageMtx;
	std::mutex pcmdMtx;
	std::mutex udpMtx;
	std::mutex navdataMtx;
	std::mutex videoPoolMtx;

	std::chrono::system_clock::time_point startTime;
	std::chrono::system_clock::time_point endTime;
	
	int maxFragmentSize;
	int maxFragmentNumber;

	FFMPEGDecoder ffmpegDecoder;

	NavData navData;
	VideoDataPool videoDataPool;
	

public:

	bebopCommand();
	~bebopCommand(void);
	void takeOff();
	UINT32 readUInt32(UINT8 *byte, int index);
	UINT32 readUInt32(char *byte, int index);
	UINT16 readUInt16(UINT8 *byte, int index);
	UINT16 readUInt16(char *byte, int index);
	cv::Mat getImage();
	void moveCamera(short tilt, short pan);
	void move(int x, int y, int z, int r);
	void flatTrim();
	void emergency();
	int getBatteryCharge();
	void getVlocity(double *vx, double *vy, double *vz);
	double getYaw();
	bool onGround();
	void landing();

};


#define BEBOP_IP_ADDRESS "192.168.42.1"
#define BEBOP_DISCOVERY_PORT 4444
